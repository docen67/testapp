{"version":3,"sources":["reportWebVitals.js","serviceWorker.js","views/home.js","views/contact.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","App","theme","textAlign","fontSize","minH","p","spacing","color","href","target","rel","Index","exact","path","component","HomePage","ContactPage","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yHAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCKMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sECkBSC,MAzBf,WACE,OACE,cAAC,IAAD,CAAgBC,MAAOA,QAAvB,SACE,cAAC,IAAD,CAAKC,UAAU,SAASC,SAAS,KAAjC,SACE,cAAC,IAAD,CAAMC,KAAK,QAAQC,EAAG,EAAtB,SACE,eAAC,IAAD,CAAQC,QAAS,EAAjB,UACE,cAAC,IAAD,mBAGA,cAAC,IAAD,CACEC,MAAM,WACNC,KAAK,wBACLL,SAAS,MACTM,OAAO,SACPC,IAAI,sBALN,oCCAGV,MAZf,WACE,OACE,cAAC,IAAD,CAAgBC,MAAOA,QAAvB,SACM,cAAC,IAAD,CAAQK,QAAS,EAAjB,SACE,cAAC,IAAD,2BCGNK,EAAQ,kBACZ,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,cAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWE,UAKxCC,iBAAO,cAAC,EAAD,IAAWC,SAASC,eAAe,SH2GpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YG7G5B1C,M","file":"static/js/main.cd761b04.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  Text,\r\n  Link,\r\n  VStack,\r\n  Grid,\r\n  theme,\r\n} from '@chakra-ui/react';\r\n\r\nfunction App() {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <Box textAlign=\"center\" fontSize=\"xl\">\r\n        <Grid minH=\"100vh\" p={3}>\r\n          <VStack spacing={8}>\r\n            <Text>\r\n              Home\r\n            </Text>\r\n            <Link\r\n              color=\"teal.500\"\r\n              href=\"https://chakra-ui.com\"\r\n              fontSize=\"2xl\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Learn Chakra\r\n            </Link>\r\n          </VStack>\r\n        </Grid>\r\n      </Box>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {\r\n  ChakraProvider,\r\n  Text,\r\n  VStack,\r\n  theme,\r\n} from '@chakra-ui/react';\r\n\r\nfunction App() {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n          <VStack spacing={8}>\r\n            <Text>\r\n              Contact\r\n            </Text>\r\n          </VStack>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';import * as serviceWorker from './serviceWorker';\n\nimport HomePage from \"./views/home.js\"\nimport ContactPage from \"./views/contact.js\"\n\n{/*ReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);*/}\n\nconst Index = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/contact\" component={ContactPage} />\n    </Switch>\n  </Router>\n);\n\nrender(<Index />, document.getElementById('root'));\n\nserviceWorker.unregister();\n\nreportWebVitals();\n"],"sourceRoot":""}